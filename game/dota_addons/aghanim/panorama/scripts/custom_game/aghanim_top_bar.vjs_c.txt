"use strict";

var g_nLoadedBestTimes = 0;
var g_nTournamentSeed = 0;
var g_hBestTimes = null;

var g_bInit = false;
if ( g_bInit == false )
{
	$.GetContextPanel().SetDialogVariable( "encounter_name", $.Localize( "#encounter_hub" ) );
	$.GetContextPanel().SetDialogVariable( "room_name", $.Localize( "#DOTA_AghsLab_Depth0" ) );
	g_bInit = true;
}


function UpdateTopBar()
{
	UpdateGameTimers();
	UpdateRespawnsRemaining();
	$.Schedule( 1.0, UpdateTopBar );
}

function UpdateGameTimers()
{
	if ( g_nLoadedBestTimes == 0 )
	{
		g_nLoadedBestTimes = 1;
		var hTournamentMode = CustomNetTables.GetTableValue( "game_global", "tournament_mode" );
		g_nTournamentSeed = hTournamentMode ? Number( hTournamentMode["1"] ) : 0;
		if ( g_nTournamentSeed != 0 )
		{
			g_hBestTimes = GameUI.LoadPersistentEventGameData();	
			if ( g_hBestTimes == null )
			{
				g_hBestTimes = {};				
			}
			if ( g_hBestTimes[ g_nTournamentSeed.toString() ] == null )
			{
				g_hBestTimes[ g_nTournamentSeed.toString() ] = {};				
			}	
			$.GetContextPanel().AddClass( "IsInTournamentMode" );				
		}
	}
	var secondsRaw = Math.floor( Game.GetGameTime() ) ;
	var expeditionStartTime = CustomNetTables.GetTableValue( "game_global", "expedition_start_time" );
	if ( expeditionStartTime == null )
	{
		secondsRaw = 0;
	}
	else
	{
		secondsRaw = secondsRaw - Number( expeditionStartTime["1"] );
		if ( secondsRaw < 0 )
		{
			secondsRaw = 0;
		}
	}

	var minutes = Math.floor( secondsRaw / 60 );
	var seconds = Math.floor( secondsRaw - minutes * 60 );
	$.GetContextPanel().FindChildInLayoutFile( "GameTimer" ).text = Math.floor( minutes ) + ":" + ( "0" + seconds ).slice(-2);

	var Depth = CustomNetTables.GetTableValue( "encounter_state", "depth_started" );
	var nCurrentDepth = Depth ? Number( Depth[ "1" ] ) : 1;
	$( '#DepthLabel' ).SetDialogVariableInt( "depth", nCurrentDepth - 1 );
 	//$( '#DepthLabel' ).SetHasClass( "ShowDepth", nCurrentDepth > 1 );
 	
	if ( g_hBestTimes != null )
	{
		var bBestTime = g_hBestTimes[ g_nTournamentSeed.toString() ][ (nCurrentDepth + 1).toString() ] == null;
		var bHasComparisonData = !bBestTime;
		if ( bBestTime == true && g_hBestTimes[ g_nTournamentSeed.toString() ][ nCurrentDepth.toString() ] != null )
		{
			// In this case, we're on our deepest room.
			var hEncounterData = CustomNetTables.GetTableValue( "encounter_state", nCurrentDepth.toString() );
			if ( hEncounterData != null && hEncounterData[ "start_time" ] != null )
			{
				bBestTime = hEncounterData[ "start_time" ] < Number( g_hBestTimes[ g_nTournamentSeed.toString() ][ nCurrentDepth.toString() ] );
			}
		}
		$.GetContextPanel().SetHasClass( "DeepestRun", bBestTime );
		$.GetContextPanel().SetHasClass( "HasComparisonData", bHasComparisonData );
		if ( bHasComparisonData ) 
		{
			var flBestSecondsRaw = g_hBestTimes[ g_nTournamentSeed.toString() ][ (nCurrentDepth + 1).toString() ];
			var nBestMinutes = Math.floor( flBestSecondsRaw / 60 );
			var nBestSeconds = Math.floor( flBestSecondsRaw - nBestMinutes * 60 );
			$.GetContextPanel().SetHasClass( "FasterRun", flBestSecondsRaw >= secondsRaw );
			$( '#BestRunInfo' ).SetDialogVariable( "best_run_time", nBestMinutes + ":" + ( "0" + nBestSeconds ).slice(-2) );
 
			var flRelSecondsRaw = secondsRaw - flBestSecondsRaw;
			var bNegative = ( flRelSecondsRaw < 0 ) ? 1 : 0;
			flRelSecondsRaw = Math.abs( flRelSecondsRaw ); 
			var nRelMinutes = Math.floor( flRelSecondsRaw / 60 );
			var nRelSeconds = Math.floor( flRelSecondsRaw - nRelMinutes * 60 );
			$( '#BestRunRelInfo' ).SetDialogVariable( "best_rel_run_time", ( bNegative ? "-" : "+" ) + nRelMinutes + ":" + ( "0" + nRelSeconds ).slice(-2) );
		}
	}
}

function OnTournamentGameEnded( table_name, key, data )
{
	if ( g_hBestTimes == null )
		return;

	if ( data == null || key != "tournament_end_score" )
		return;

	var nTournamentScore = Number( data[ "score" ] );

	if ( ( g_hBestTimes[ g_nTournamentSeed.toString() ][ "best_score" ] != null ) &&
		( Number( g_hBestTimes[ g_nTournamentSeed.toString() ][ "best_score" ] ) <= nTournamentScore ) )
		return;

	var hTournamentTable = {};
	hTournamentTable[ "best_score" ] = nTournamentScore;

	var Depth = CustomNetTables.GetTableValue( "encounter_state", "depth_started" );
	var nCurrentDepth = Depth ? Number( Depth[ "1" ] ) : 1;

	for ( var i = 1; i <= nCurrentDepth; ++i )
	{
		var hEncounterData = CustomNetTables.GetTableValue( "encounter_state", i.toString() );
		if ( hEncounterData == null || hEncounterData[ "start_time" ] == null )
			continue;

		hTournamentTable[ i.toString() ] = hEncounterData[ "start_time" ];
	}
	if ( Number( data[ "won_game" ] ) != 0 )
	{
		hTournamentTable[ (nCurrentDepth+1).toString() ] = data[ "end_time" ];	
	}

	g_hBestTimes[ g_nTournamentSeed.toString() ] = hTournamentTable
	GameUI.SavePersistentEventGameData( g_hBestTimes );	
}

CustomNetTables.SubscribeNetTableListener( "game_global", OnTournamentGameEnded );

CustomNetTables.SubscribeNetTableListener( "respawns_remaining", UpdateRespawnsRemaining )

CustomNetTables.SubscribeNetTableListener( "respawns_max", UpdateRespawnsRemaining )

function UpdateRespawnsRemaining()
{
	var vecPlayers = Game.GetPlayerIDsOnTeam( DOTATeam_t.DOTA_TEAM_GOODGUYS );

	if( vecPlayers == null )
		return

	for ( var szPlayerID in vecPlayers )
	{
		var nPlayerID = Number(szPlayerID);
		var playerHeroEntIndex = Players.GetPlayerHeroEntityIndex( nPlayerID );
		//$.Msg(" updating respawns for hero "+nPlayerID+" "+playerHeroEntIndex );
		var respawnData = CustomNetTables.GetTableValue( "respawns_remaining", playerHeroEntIndex.toString() );
		var respawnMaxData = CustomNetTables.GetTableValue( "respawns_max", playerHeroEntIndex.toString() );

		if ( respawnData == null || respawnMaxData == null)
			continue;

		var nRespawnsRemaining = respawnData["respawns"]
		var nRespawnsMax = respawnMaxData["respawns"]
		var partyPortraitPanelName = "PartyPortrait"+nPlayerID;
		var playerPortrait = $( "#PartyPortraits" ).FindChildTraverse(partyPortraitPanelName);

		if( playerPortrait )
		{
			playerPortrait.SetDialogVariableInt( "respawns_remaining", nRespawnsRemaining );
			playerPortrait.SetDialogVariableInt( "respawns_max", nRespawnsMax );
			playerPortrait.SetHasClass("DataFilled", true);
			playerPortrait.SwitchClass( "respawns", "RespawnsLeft" + nRespawnsRemaining.toString() );
			playerPortrait.SwitchClass( "respawns_max", "RespawnsMax" + nRespawnsMax.toString() );
		}
	}
}

$.Schedule( 1.0, UpdateTopBar );


function OnIntroduceEncounter( data )
{
	if ( data === null )
		return;

	$.Msg( data.encounter_name );

	$.GetContextPanel().SetDialogVariable( "encounter_name", $.Localize( '#' + data.encounter_name ) );
	$.GetContextPanel().SwitchClass( "EncounterName", data.encounter_name );
	$.GetContextPanel().SwitchClass( "RoomType", data.room_type );
	$.GetContextPanel().SetDialogVariable( "encounter_depth", Number( data.encounter_depth ) - 1 );
	$.GetContextPanel().SetHasClass( "HardRoom", data[ "hard_room" ] == 1 );
	$.GetContextPanel().SwitchClass( "AscensionLevel", "Ascension" + data[ "total_difficulty" ] );
	//$.Msg( Number( data.encounter_depth ) );
	var szRoomName = "#DOTA_AghsLab_Depth" +  ( Number( data.encounter_depth ) - 1).toString();
	$.GetContextPanel().SetDialogVariable( "room_name", $.Localize( szRoomName ) );

	var ModifiersContainer = $.GetContextPanel().FindChildInLayoutFile( "EncounterModifiersContainer" );
	ModifiersContainer.RemoveAndDeleteChildren(); 

	var bHasAscensionAbilities = false;
	if ( data[ "ascension_abilities" ] != null )
	{
		for ( var key of Object.keys( data[ "ascension_abilities" ] ) )
		{	
			var szAbilityName = data[ "ascension_abilities" ][ key ];
			if ( szAbilityName == null )
				continue;

			bHasAscensionAbilities = true;

			var ModifierPanel = $.CreatePanel( "Panel", ModifiersContainer, szAbilityName );
	      	ModifierPanel.BLoadLayoutSnippet( "EncounterModifier" );
	      	ModifierPanel.SwitchClass( "ascension_ability_name", szAbilityName );
			ModifierPanel.SetDialogVariable( "ability_name", $.Localize( '#' + szAbilityName ) );	

			(function( modifierPanel, szLocalizeAbilityName )
	        {
	            modifierPanel.SetPanelEvent( 'onmouseover', function () { $.DispatchEvent( 'UIShowTitleTextTooltip', modifierPanel, $.Localize( '#' + szLocalizeAbilityName ), $.Localize( '#' + szLocalizeAbilityName + "_Description" ) ); } );
   				modifierPanel.SetPanelEvent( 'onmouseout', function () { $.DispatchEvent( 'UIHideTitleTextTooltip', modifierPanel ); } );;
	        })( ModifierPanel, szAbilityName ); 
			
		}		
	}

	$.GetContextPanel().SetHasClass( "HasAscensionAbilities", bHasAscensionAbilities );

	var EncounterObjectives = $( "#EncounterObjectives" );
	if ( EncounterObjectives == null )
		return;

	EncounterObjectives.RemoveAndDeleteChildren();
	UpdateObjectives();
}

GameEvents.Subscribe( "introduce_encounter", OnIntroduceEncounter );


function OnCompleteEncounter()
{
	$( "#EncounterObjectives" ).RemoveAndDeleteChildren(); 
}

GameEvents.Subscribe( "complete_encounter", OnCompleteEncounter );

function OnEncounterUpdated()
{
	UpdateObjectives();
}

function UpdateObjectives()
{
	var Depth = CustomNetTables.GetTableValue( "encounter_state", "depth" );
	var szCurrentDepth = Depth ? Depth[ "1" ] : null;
	if ( szCurrentDepth === null )
		return;

	var data = CustomNetTables.GetTableValue( "encounter_state", szCurrentDepth );
	if ( data == null )
		return;

	var ObjectivesContainer = $( "#EncounterObjectives" );
	for ( var key of Object.keys( data[ "objectives" ] ) )
	{
		var Objective = data[ "objectives" ][ key ];
		if ( Objective == null )
			continue;

		//$.Msg( "Found an objective" );
		var ObjectivePanel = ObjectivesContainer.FindChildTraverse( Objective[ "name" ] );
		if ( ObjectivePanel === null )
		{
			var nOrder = Objective[ "order" ];
			var hBeforeChild = null;
			for ( var nChild = 0; nChild < ObjectivesContainer.GetChildCount(); nChild++ )
			{
				var hChild = ObjectivesContainer.GetChild( nChild );
				if ( hChild == null )
					continue;

				if ( hChild.GetAttributeInt( "order", 0 ) >= nOrder )
				{
					hBeforeChild = hChild;
					break;
				}
			}

			//$.Msg( "Creating new snippet" );
			ObjectivePanel = $.CreatePanel( "Panel", ObjectivesContainer, Objective[ "name" ] );
	        ObjectivePanel.BLoadLayoutSnippet( "EncounterObjective" );
	        if ( hBeforeChild != null )
	        {
	        	ObjectivesContainer.MoveChildBefore( ObjectivePanel, hBeforeChild );
	        }
	        ObjectivePanel.SetAttributeInt( "order", nOrder );
		}

		var szObjectiveLocString = Objective[ "name" ];
		ObjectivePanel.SetDialogVariable( "objective_desc", $.Localize( '#' + szObjectiveLocString ) );

		var nValue = Objective[ "value" ];
		ObjectivePanel.SetDialogVariableInt( "value", nValue );

		var nGoal = Objective[ "goal" ];
		ObjectivePanel.SetDialogVariableInt( "goal", nGoal );

		var bSimple = nGoal == 0;
		ObjectivePanel.SetHasClass( "Simple", bSimple );

		if ( !bSimple  );
		{
			var ProgressBar = ObjectivePanel.FindChildTraverse( "ObjectiveProgressBar" );
			ProgressBar.value = nValue / nGoal;
		}
	}
}

CustomNetTables.SubscribeNetTableListener( "encounter_state", OnEncounterUpdated )