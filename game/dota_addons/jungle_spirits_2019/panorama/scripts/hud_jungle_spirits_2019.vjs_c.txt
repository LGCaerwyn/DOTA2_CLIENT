"use strict"
CustomNetTables.SubscribeNetTableListener( "jungle_spirits_gems_info", OnGemsDataReceived );
CustomNetTables.SubscribeNetTableListener( "jungle_spirits_branch_abilities", OnBranchAbilitiesReceived );
//CustomNetTables.SubscribeNetTableListener( "jungle_spirits_branch_globals", OnBranchGlobalsReceived );
CustomNetTables.SubscribeNetTableListener( "jungle_spirits_gem_constants", OnGemConstantsReceived );
CustomNetTables.SubscribeNetTableListener( "jungle_spirits_branch_data", OnBranchDataReceived );
CustomNetTables.SubscribeNetTableListener( "jungle_spirits_status", OnJungleSpiritStatusReceived );
GameEvents.Subscribe( "morokai_ability_learned", OnMorokaiAbilityLearned )

var g_RadiantSpiritEntIndex = -1;
var g_DireSpiritEntIndex = -1;

var g_bUIDirty = false;

var g_bMeterWasFull = false

$.GetContextPanel().SetDialogVariableInt( "jungle_branch_cost", 0 );
$.GetContextPanel().SetDialogVariableInt( "storm_branch_cost", 0 );
$.GetContextPanel().SetDialogVariableInt( "volcano_branch_cost", 0 );
$.GetContextPanel().SetDialogVariable( "time_until_morokai_march", "5:00" );
$.GetContextPanel().SetDialogVariableInt( "current_points_amount", 0 );
$.GetContextPanel().SwitchClass( "TeamClass", "Team" + Players.GetTeam( Players.GetLocalPlayer() ) );
$.GetContextPanel().SetDialogVariableInt( "morokai_level", 1 );

var MorokaiMeterPanel = $.GetContextPanel().FindChildInLayoutFile( "MorokaiEssenceMeter" );
MorokaiMeterPanel.SetDialogVariableInt( "gems_count", 0 );
MorokaiMeterPanel.SetDialogVariableInt( "upgrade_cost", 25 );



var MorokaiEssencePanel = $.GetContextPanel().FindChildInLayoutFile( "MorokaiEssence" );
var MorokaiAbilitiesPanel = $.GetContextPanel().FindChildInLayoutFile( "MorokaiAbilities" );
var RadiantMorokaiPanel = $.GetContextPanel().FindChildInLayoutFile( "MorokaiContainerRadiant" );
RadiantMorokaiPanel.BLoadLayout( "file://{resources}/layout/custom_game/morokai_container.xml", false, false );
MorokaiAbilitiesPanel.SetDialogVariable( "ability_cost", "0" );

var DireMorokaiPanel = $.GetContextPanel().FindChildInLayoutFile( "MorokaiContainerDire" );
DireMorokaiPanel.BLoadLayout( "file://{resources}/layout/custom_game/morokai_container.xml", false, false );
var RadiantMorokaiFX = $.GetContextPanel().FindChildInLayoutFile( "MarchParticleRadiant" );
var DireMorokaiFX = $.GetContextPanel().FindChildInLayoutFile( "MarchParticleDire" );

function BranchIDToName( nBranchID )
{
	var szBranchName = null;
	switch( nBranchID )
	{
		case 1: 
			szBranchName = "Jungle"; 
			break;
		case 2:
			szBranchName = "Storm";
			break;
		case 3:
			szBranchName = "Volcano"
			break;
		default:
			szBranchName = null;
	}
	return szBranchName;
}

function OnHelpOkButtonClicked()
{
    $("#GameInfoPopup").SetHasClass("Visible", false);
}

function OnGemsDataReceived()
{
	//$.Msg( "OnGemsDataReceived" );
	var nGemsCount = 0;
	var nLocalPlayerHeroEntIndex = Players.GetPlayerHeroEntityIndex( Players.GetLocalPlayer() );
	if ( nLocalPlayerHeroEntIndex != - 1 )
	{
		var data = CustomNetTables.GetTableValue( "jungle_spirits_gems_info", nLocalPlayerHeroEntIndex.toString() );
		if ( data !== undefined )
		{
			nGemsCount = data["gems_count"];
		}
	}
	$.GetContextPanel().SetDialogVariableInt( "current_points_amount", nGemsCount );
	g_bUIDirty = true;
}

function OnBranchDataReceived()
{
	//$.Msg( "OnBranchDataReceived" );
	var branchAbilities = CustomNetTables.GetTableValue( "jungle_spirits_branch_abilities", "0" );
	if ( branchAbilities === undefined )
		return;

	var branchData = CustomNetTables.GetTableValue( "jungle_spirits_branch_data", "0" );
	if ( branchData === undefined )
		return;

	var nGemsCount = 0;
	var nLocalPlayerHeroEntIndex = Players.GetPlayerHeroEntityIndex( Players.GetLocalPlayer() );
	var data = CustomNetTables.GetTableValue( "jungle_spirits_gems_info", nLocalPlayerHeroEntIndex.toString() );
	if ( data !== undefined )
	{
		nGemsCount = data["gems_count"];
	}

	var gemConstants = CustomNetTables.GetTableValue( "jungle_spirits_gem_constants",  "0" );
	var MorokaiPanel = RadiantMorokaiPanel;
	var teamBranchData = Players.GetTeam(Players.GetLocalPlayer()) == DOTATeam_t.DOTA_TEAM_GOODGUYS ? branchData["radiant"] : branchData["dire"];
	var nBranchID = 1;

	var nMorokaiLevel = Players.GetTeam(Players.GetLocalPlayer()) == DOTATeam_t.DOTA_TEAM_GOODGUYS ? Entities.GetLevel(g_RadiantSpiritEntIndex) : Entities.GetLevel(g_DireSpiritEntIndex);
	nMorokaiLevel = Math.max(1, nMorokaiLevel)
	var nUpgradeCost = Math.max(1, gemConstants["cupcakes_required_per_branch_level"][nMorokaiLevel] * gemConstants["gems_required_pct"] );

	MorokaiMeterPanel.SetDialogVariableInt( "gems_count", nGemsCount );
	MorokaiMeterPanel.SetDialogVariableInt( "upgrade_cost", nUpgradeCost );
	var flHeightPercent = Math.min(1.0, nGemsCount/nUpgradeCost)
	MorokaiEssencePanel.style.height = (100*flHeightPercent)+"%";

	var bMeterIsFull = ( nGemsCount >= nUpgradeCost );

	MorokaiMeterPanel.SetHasClass( "MeterFull", bMeterIsFull );

	if ( bMeterIsFull && g_bMeterWasFull == false )
	{
		Game.EmitSound( "UI.EssenceCounter.Full" )
	}

	if ( bMeterIsFull )
	{
		g_bMeterWasFull = true;
	}
	else
	{
		g_bMeterWasFull = false;
	}

	for ( nBranchID; nBranchID < Object.keys( teamBranchData ).length + 1; nBranchID++ )
	{
		var szBranchName = BranchIDToName( nBranchID );
		
		var nCurrentTier = teamBranchData[nBranchID]["nCurrentTier"];
		var nNextTier = nCurrentTier < 10 ? nCurrentTier + 1 : -1;

		var nCurrentXP = teamBranchData[nBranchID]["nCurrentXP"];
		var branchAbilitiesData = branchAbilities[nBranchID];

		var statusData = CustomNetTables.GetTableValue("jungle_spirits_status", "0");
		g_RadiantSpiritEntIndex = statusData["radiant_ent_index"];
		g_DireSpiritEntIndex = statusData["dire_ent_index"];

		var ColumnPanel = MorokaiAbilitiesPanel.FindChildTraverse( szBranchName + "Column" );
		if ( ColumnPanel != null )
		{
			var nLearnedTier = 0
			if( nUpgradeCost == 0 )
			{
				ColumnPanel.SetDialogVariable( "ability_cost", "Max" );
			}
			else
			{
				ColumnPanel.SetDialogVariable( "ability_cost", nUpgradeCost );
			}
			var nTier = 1;
			for ( nTier; nTier < 11; nTier++ )
			{
				var szTierPanelName = szBranchName + "Tier" + nTier;
				var TierPanel = ColumnPanel.FindChildTraverse( szTierPanelName );
				if ( TierPanel === null )
				{
					TierPanel = $.CreatePanel( "Panel", ColumnPanel, szTierPanelName );
					TierPanel.BLoadLayout( "file://{resources}/layout/custom_game/morokai_skill_tier.xml", false, false );
					TierPanel.SetHasClass( "Minor", gemConstants["major_tiers"][nTier] != 1 );
					TierPanel.AddClass( "SkillTier" + nTier );
				}
				
				var bLearned = nCurrentTier >= nTier;
				TierPanel.SetHasClass( "Learned", bLearned );

				var bLearnable =  nTier == ( nCurrentTier + 1 ) && nGemsCount >= nUpgradeCost;
				TierPanel.SetHasClass( "Learnable", bLearnable );

				if ( bLearned )
				{
					nLearnedTier = nTier;
				}
			
				//var TierProgressBar = TierPanel.FindChildTraverse( "Path" );
				//TierProgressBar.value = bLearned ? 1.0 : 0.0;
				//if ( !bLearned && nTier == nCurrentTier + 1 )
				//{
				//	TierProgressBar.value = nCurrentXP / gemConstants["cupcakes_required_per_branch_level"][nTier];
				//}
		
				var TierAbility = TierPanel.FindChildTraverse( "Ability" );
				var AbilityName = branchAbilitiesData[nTier]
				TierAbility.abilityname = AbilityName;
				//$.Msg("ability name is "+AbilityName);
				//TierAbility.SetImage( "file://{images}/" + szBranchName + "_pip.psd" );
				TierAbility.SetAttributeInt( "BranchID", nBranchID );
				TierAbility.SetAttributeInt( "UpgradeCost", nUpgradeCost );

				if( AbilityName ==  "morokai_jungle_heal_beam"
				 || AbilityName == "jungle_spirit_storm_cyclone" 
				 || AbilityName == "junglespirit_volcano_eruption" )
				{
					TierPanel.SwitchClass("ability_type", "BeastAbility");
				}
				else if( AbilityName.indexOf("special_bonus") >= 0 )
				{
					TierPanel.SwitchClass("ability_type", "BeastPassive");
				}
				else
				{
					TierPanel.SwitchClass("ability_type", "PlayerPassive");
				}
				
			}
			ColumnPanel.SetDialogVariableInt( "learned_tier", nLearnedTier );
		}
	}
}

function OnButtonClickFailNotEnoughGems()
{
//	$.Msg( "OnButtonClickFailNotEnoughGems" );
}

function OnBranchAbilitiesReceived()
{
//	$.Msg( "OnBranchAbilitiesReceived" );
}



function OnBranchAbilityButtonClicked( nBranchID )
{
	var nGemsCount = 0;
	var flLastDamageTime = -1;
	var bSpiritActive = false;

	var nLocalPlayerHeroEntIndex = Players.GetPlayerHeroEntityIndex( Players.GetLocalPlayer() );
	var data = CustomNetTables.GetTableValue( "jungle_spirits_gems_info", nLocalPlayerHeroEntIndex.toString() );
	if ( data !== undefined )
	{
		nGemsCount = data["gems_count"];
		flLastDamageTime = data["last_damage_time"];
		bSpiritActive = data["spirit_active"] == 1;
		//$.Msg( "bSpiritActive: " + bSpiritActive );
	}

	if ( ( flLastDamageTime + 3.0 ) > Game.GetGameTime() )
	{
		GameUI.SendCustomHUDError( "#hud_error_took_damage_recently", "General.CastFail_AbilityInCooldown" );
		MorokaiAbilitiesPanel.SetHasClass("Hidden", true);
		return;
	}

	var szBranchName = BranchIDToName( nBranchID );
	var nMorokaiLevel = Players.GetTeam(Players.GetLocalPlayer()) == DOTATeam_t.DOTA_TEAM_GOODGUYS ? Entities.GetLevel(g_RadiantSpiritEntIndex) : Entities.GetLevel(g_DireSpiritEntIndex);
	var gemConstants = CustomNetTables.GetTableValue( "jungle_spirits_gem_constants",  "0" );
	var nUpgradeCost = gemConstants["cupcakes_required_per_branch_level"][nMorokaiLevel] * gemConstants["gems_required_pct"];
	if ( nUpgradeCost > nGemsCount )
	{
		GameUI.SendCustomHUDError( "#hud_error_not_enough_gems", "General.NoGold" );
		//MorokaiAbilitiesPanel.SetHasClass("Hidden", true);
		return;
	}
	
	/*var nNextUpgradeCost = gemConstants["cupcakes_required_per_branch_level"][nMorokaiLevel + 1 ] * gemConstants["gems_required_pct"];
	if( nGemsCount < (nNextUpgradeCost + nUpgradeCost ) )
	{
		MorokaiAbilitiesPanel.SetHasClass("Hidden", true);
	}*/

	var data = [];
	data["PlayerID"] = Players.GetLocalPlayer();
	data["BranchID"] = nBranchID;
	data["LearnMode"] = true;
	GameEvents.SendCustomGameEventToServer( "branch_button_clicked", data );
}

function ToggleSkillTree()
{
	//$.Msg("Toggling Skill Tree");
	Game.EmitSound( "ui.books.pageturns" );
	MorokaiAbilitiesPanel.ToggleClass("Hidden");
}


function OnGemConstantsReceived()
{
//	$.Msg( "OnGemConstantsReceived" );
}

function OnJungleSpiritStatusReceived()
{
	//$.Msg( "OnJungleSpiritStatusReceived" );
	if ( Game.GameStateIsBefore( DOTA_GameState.DOTA_GAMERULES_STATE_GAME_IN_PROGRESS ) )
	{
		$.GetContextPanel().SetHasClass( "NoTimer", true );
		return;
	}

	$.GetContextPanel().SetHasClass( "NoTimer", false );

	var statusData = CustomNetTables.GetTableValue( "jungle_spirits_status","0" );
	g_RadiantSpiritEntIndex = statusData["radiant_ent_index"];
	g_DireSpiritEntIndex = statusData["dire_ent_index"];

	var oldMarchingDire = $.GetContextPanel().BHasClass( "DireMorokaiMarching" );
	var oldMarchingRadiant = $.GetContextPanel().BHasClass( "RadiantMorokaiMarching" );
	if ( statusData["dire_active"] != oldMarchingDire )
	{
	    $.GetContextPanel().SetHasClass( "DireMorokaiMarching", statusData["dire_active"] );
	    if ( statusData["dire_active"] )
	        DireMorokaiFX.BLoadLayoutSnippet( "MarchParticlesDire" );
	    else
	        DireMorokaiFX.RemoveAndDeleteChildren();
	}
	if ( statusData["radiant_active"] != oldMarchingRadiant )
	{
	    $.GetContextPanel().SetHasClass( "RadiantMorokaiMarching", statusData["radiant_active"] );
	    if ( statusData["radiant_active"] )
	        RadiantMorokaiFX.BLoadLayoutSnippet( "MarchParticlesRadiant" );
	    else
	        RadiantMorokaiFX.RemoveAndDeleteChildren();
	}
	
	if ( statusData["time_until_march"] != 'undefined' )
	{
		var secondsRaw = Math.floor( statusData["time_until_march"] );
		var minutes = secondsRaw / 60;
		var seconds = minutes < 1 ? secondsRaw : secondsRaw - ( Math.floor( minutes ) * 60 ); 

		$.GetContextPanel().SetDialogVariable( "time_until_morokai_march", Math.floor( minutes ) + ":" + ( "0" + seconds ).slice(-2) );	

		var szPushLane = statusData["march_lane"];
		var bIsAllyPush = statusData["next_march_team"] == Players.GetTeam( Game.GetLocalPlayerID() );
		var szPushAllyOrEnemy = bIsAllyPush ? "Ally" : "Enemy";
		var szPushTeam = statusData["next_march_team"] == DOTATeam_t.DOTA_TEAM_GOODGUYS ? "Radiant" : "Dire";

		$.GetContextPanel().SwitchClass( "push_team", szPushAllyOrEnemy + "Push" );
		$.GetContextPanel().SwitchClass( "push_ally", szPushTeam + "Push" );
		$.GetContextPanel().SwitchClass( "push_lane", szPushAllyOrEnemy + "_" + szPushLane );
	}
	var radiantDurationLeft = -1;
	if( statusData["radiant_duration"]  !== undefined  )
	{
		radiantDurationLeft = statusData["radiant_duration"] + 150 - Game.GetGameTime();
	}
	if( radiantDurationLeft > 0 )
	{
		var secondsRaw = Math.floor( radiantDurationLeft );
		var minutes = secondsRaw / 60;
		var seconds = minutes < 1 ? secondsRaw : secondsRaw - ( Math.floor( minutes ) * 60 ); 
		RadiantMorokaiPanel.SetDialogVariable( "time_left", Math.floor( minutes ) + ":" + ( "0" + seconds ).slice(-2) );
	}
	
	var direDurationLeft = -1;
	if( statusData["dire_duration"]  !== undefined  )
	{
		direDurationLeft = statusData["dire_duration"] + 150 - Game.GetGameTime();
	}
	if( direDurationLeft > 0 )
	{
		var secondsRaw = Math.floor( direDurationLeft );
		var minutes = secondsRaw / 60;
		var seconds = minutes < 1 ? secondsRaw : secondsRaw - ( Math.floor( minutes ) * 60 ); 
		DireMorokaiPanel.SetDialogVariable( "time_left", Math.floor( minutes ) + ":" + ( "0" + seconds ).slice(-2) );
	}

	UpdateMorokaiStatus();
}

function UpdateMorokaiStatus()
{
	// HP
	var RadiantHPProgress = RadiantMorokaiPanel.FindChildTraverse( "MorokaiHP" );
	RadiantHPProgress.value = Entities.GetHealthPercent( g_RadiantSpiritEntIndex ) / 100;
	RadiantMorokaiPanel.SetDialogVariableInt( "morokai_level", Entities.GetLevel( g_RadiantSpiritEntIndex ) );

	var DireHPProgress = DireMorokaiPanel.FindChildTraverse( "MorokaiHP" );
	DireHPProgress.value = Entities.GetHealthPercent( g_DireSpiritEntIndex ) / 100;
	DireMorokaiPanel.SetDialogVariableInt( "morokai_level", Entities.GetLevel( g_DireSpiritEntIndex ) );

	//Branches
	var BranchData = CustomNetTables.GetTableValue( "jungle_spirits_branch_data",  "0" );
	if ( BranchData === undefined )
		return;

	var RadiantData = BranchData["radiant"];
	if ( RadiantData === undefined )
		return;

	var nBranchID = 1;
	for ( nBranchID; nBranchID < Object.keys( RadiantData ).length + 1; nBranchID++ )
	{
		var szBranchName = BranchIDToName( nBranchID );
		var nCurrentTier = RadiantData[nBranchID]["nCurrentTier"];

		var BranchStatusPanel = RadiantMorokaiPanel.FindChildTraverse( szBranchName + "Status" );
		BranchStatusPanel.SetHasClass( "Empty", nCurrentTier == 0 );

		var BranchProgressBar = BranchStatusPanel.FindChildTraverse( szBranchName +"Progress" );
		BranchProgressBar.value =  nCurrentTier / 10;
	}

	var DireData = BranchData["dire"];
	if ( DireData === undefined )
		return;

	nBranchID = 1;
	for ( nBranchID; nBranchID < Object.keys( DireData ).length + 1; nBranchID++ )
	{
		var szBranchName = BranchIDToName( nBranchID );
		var nCurrentTier = DireData[nBranchID]["nCurrentTier"];

		var BranchStatusPanel = DireMorokaiPanel.FindChildTraverse( szBranchName + "Status" );
		BranchStatusPanel.SetHasClass( "Empty", nCurrentTier == 0 );

		var BranchProgressBar = BranchStatusPanel.FindChildTraverse( szBranchName +"Progress" );
		BranchProgressBar.value =  nCurrentTier / 10;
	}
	
}


function OnMorokaiAbilityLearned( data )
{
	var ToastManager = $.GetContextPanel().FindChildInLayoutFile( "ToastManager" );
	var Toast = $.CreatePanel( "Panel", ToastManager, data["ability_name"] );
	Toast.BLoadLayoutSnippet( "MorokaiAbilityLearnedToast" );

	var HeroPanel = Toast.FindChildTraverse( "UpgradingPlayerHero" );
	HeroPanel.heroname = data["hero_name"];

	var AbilityPanel = Toast.FindChildTraverse( "MorokaiAbilityLearned" );
	AbilityPanel.abilityname = data["ability_name"];

	var szBranchName = BranchIDToName( data["branch_id"] );
	Toast.SetDialogVariable( "branch_name", $.Localize( szBranchName + "_branch_cost" ) );
	Toast.SetDialogVariable( "ability_learned_name", $.Localize( "#DOTA_Tooltip_ability_" + data["ability_name"] ) );
	Toast.SetDialogVariable( "ability_learned_desc", $.Localize( "#DOTA_Tooltip_ability_" + data["ability_name"] + "_Description" ) );
	Toast.SwitchClass("branch_name", "Branch"+szBranchName );

	ToastManager.QueueToast( Toast );
}

(function UpdateJungleSpiritsUI()
{	
	$.GetContextPanel().SetHasClass( "AltPressed", GameUI.IsAltDown() );
	var MorokaiPanel = Players.GetTeam( Players.GetLocalPlayer() ) == DOTATeam_t.DOTA_TEAM_GOODGUYS ? RadiantMorokaiPanel : DireMorokaiPanel;
	if ( g_bUIDirty != MorokaiAbilitiesPanel.BHasClass( "Expanded" ) )
	{
		g_bUIDirty = MorokaiAbilitiesPanel.BHasClass( "Expanded" );
		OnBranchDataReceived();
		//OnBranchGlobalsReceived();
	}

	$.Schedule( 1.0/60.0, UpdateJungleSpiritsUI );
})();

