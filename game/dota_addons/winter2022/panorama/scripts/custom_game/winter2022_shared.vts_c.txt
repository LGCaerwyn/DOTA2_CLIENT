/// <reference path="../../../../../dota/panorama/scripts/dota.d.ts" />
/// <reference path="../../../../../dota/panorama/scripts/util.ts" />
const Globals = {
    constants: CustomNetTables.GetTableValue("globals", "constants"),
    values: CustomNetTables.GetTableValue("globals", "values")
};
CustomNetTables.SubscribeNetTableListener("globals", (_, key, value) => Globals[key] = value);
function SubscribeAllTableValues(tableName, onUpdate) {
    const table = {};
    const all = CustomNetTables.GetAllTableValues(tableName);
    all.forEach(v => table[v.key] = v.value);
    $.Schedule(0, onUpdate);
    CustomNetTables.SubscribeNetTableListener(tableName, (_, key, value) => {
        table[key] = value;
        onUpdate();
    });
    return table;
}
function GetValidPlayerIDs() {
    const ids = [];
    for (let i = 0; i <= Players.GetMaxPlayers(); i++) {
        if (Players.IsValidPlayerID(i) && !Players.IsSpectator(i)) {
            ids.push(i);
        }
    }
    return ids;
}
function IsLocalPlayerPlaying() {
    const nTeam = Players.GetTeam(Players.GetLocalPlayer());
    return nTeam === DOTATeam_t.DOTA_TEAM_GOODGUYS || nTeam === DOTATeam_t.DOTA_TEAM_BADGUYS;
}
function TrackAltPressed(panel) {
    panel.SetHasClass("AltPressed", IsDotaAltPressed());
    $.Schedule(0.0, () => TrackAltPressed(panel));
}
function GetPanelRect(panel) {
    const x = panel.GetPositionWithinWindow().x / panel.actualuiscale_x;
    const y = panel.GetPositionWithinWindow().y / panel.actualuiscale_y;
    const width = panel.actuallayoutwidth / panel.actualuiscale_x;
    const height = panel.actuallayoutheight / panel.actualuiscale_y;
    return { x, y, width, height };
}
function ObjectToMap(obj) {
    return new Map(Object.keys(obj).map(k => [k, obj[k]]));
}
// Calls fnApply every frame with interpolated values of all keys in start and number.
// Calls fnDone at the end if provided.
// fnApply( start ) is called synchronously.
// fnApply( end ) is called synchronously if nSeconds <= 0.
function InterpolateEveryFrame(nSeconds, start, end, fnApply, fnDone) {
    let bCancelled = false;
    const rgKeys = [...new Set([...start.keys(), ...end.keys()])];
    const innerStart = new Map(rgKeys.map(k => [k, start.get(k) || 0]));
    const innerEnd = new Map(rgKeys.map(k => [k, end.get(k) || 0]));
    fnApply(innerStart);
    if (nSeconds < 0) {
        fnApply(innerEnd);
        if (fnDone)
            fnDone();
    }
    else {
        const nStartTime = Game.Time();
        const nEndTime = nStartTime + nSeconds;
        function InnerApply() {
            if (bCancelled)
                return;
            const nTime = Game.Time();
            const nPercent = RemapVal(nTime, nStartTime, nEndTime, 0, 1);
            if (nPercent >= 1) {
                fnApply(innerEnd);
                if (fnDone)
                    fnDone();
            }
            else {
                const current = new Map(rgKeys.map(k => [k, Lerp(nPercent, innerStart.get(k), innerEnd.get(k))]));
                fnApply(current);
                $.Schedule(0, InnerApply);
            }
        }
        $.Schedule(0, InnerApply);
    }
    return () => bCancelled = true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ludGVyMjAyMl9zaGFyZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3aW50ZXIyMDIyX3NoYXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1RUFBdUU7QUFDdkUscUVBQXFFO0FBMkJyRSxNQUFNLE9BQU8sR0FBRztJQUNaLFNBQVMsRUFBRSxlQUFlLENBQUMsYUFBYSxDQUFFLFNBQVMsRUFBRSxXQUFXLENBQUU7SUFDbEUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxhQUFhLENBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBOEI7Q0FDM0YsQ0FBQztBQUNGLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBRSxTQUFTLEVBQUUsQ0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUcsT0FBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUUsQ0FBQztBQUU3RyxTQUFTLHVCQUF1QixDQUFLLFNBQWlCLEVBQUUsUUFBb0I7SUFFeEUsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztJQUVoQyxNQUFNLEdBQUcsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUssU0FBUyxDQUFFLENBQUM7SUFDOUQsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBRSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBRSxDQUFDO0lBRTFCLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBSyxTQUFTLEVBQUUsQ0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRyxFQUFFO1FBRXpFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkIsUUFBUSxFQUFFLENBQUM7SUFDZixDQUFDLENBQUUsQ0FBQztJQUVKLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGlC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