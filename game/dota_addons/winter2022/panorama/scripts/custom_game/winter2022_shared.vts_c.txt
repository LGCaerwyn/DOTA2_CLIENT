"use strict";
/// <reference path="../../../../../dota/panorama/scripts/dota.d.ts" />
/// <reference path="../../../../../dota/panorama/scripts/util.ts" />
const Globals = {
    constants: CustomNetTables.GetTableValue("globals", "constants"),
    values: CustomNetTables.GetTableValue("globals", "values")
};
CustomNetTables.SubscribeNetTableListener("globals", (_, key, value) => Globals[key] = value);
function SubscribeAllTableValues(tableName, onUpdate) {
    const table = {};
    const all = CustomNetTables.GetAllTableValues(tableName);
    all.forEach(v => table[v.key] = v.value);
    $.Schedule(0, onUpdate);
    CustomNetTables.SubscribeNetTableListener(tableName, (_, key, value) => {
        table[key] = value;
        onUpdate();
    });
    return table;
}
function GetValidPlayerIDs() {
    const ids = [];
    for (let i = 0; i <= Players.GetMaxPlayers(); i++) {
        if (Players.IsValidPlayerID(i) && !Players.IsSpectator(i)) {
            ids.push(i);
        }
    }
    return ids;
}
function IsLocalPlayerPlaying() {
    const nTeam = Players.GetTeam(Players.GetLocalPlayer());
    return nTeam === DOTATeam_t.DOTA_TEAM_GOODGUYS || nTeam === DOTATeam_t.DOTA_TEAM_BADGUYS;
}
function TrackAltPressed(panel) {
    panel.SetHasClass("AltPressed", IsDotaAltPressed());
    $.Schedule(0.0, () => TrackAltPressed(panel));
}
function GetPanelRect(panel) {
    const x = panel.GetPositionWithinWindow().x / panel.actualuiscale_x;
    const y = panel.GetPositionWithinWindow().y / panel.actualuiscale_y;
    const width = panel.actuallayoutwidth / panel.actualuiscale_x;
    const height = panel.actuallayoutheight / panel.actualuiscale_y;
    return { x, y, width, height };
}
function ObjectToMap(obj) {
    return new Map(Object.keys(obj).map(k => [k, obj[k]]));
}
// Calls fnApply every frame with interpolated values of all keys in start and number.
// Calls fnDone at the end if provided.
// fnApply( start ) is called synchronously.
// fnApply( end ) is called synchronously if nSeconds <= 0.
function InterpolateEveryFrame(nSeconds, start, end, fnApply, fnDone) {
    let bCancelled = false;
    const rgKeys = [...new Set([...start.keys(), ...end.keys()])];
    const innerStart = new Map(rgKeys.map(k => [k, start.get(k) || 0]));
    const innerEnd = new Map(rgKeys.map(k => [k, end.get(k) || 0]));
    fnApply(innerStart);
    if (nSeconds < 0) {
        fnApply(innerEnd);
        if (fnDone)
            fnDone();
    }
    else {
        const nStartTime = Game.Time();
        const nEndTime = nStartTime + nSeconds;
        function InnerApply() {
            if (bCancelled)
                return;
            const nTime = Game.Time();
            const nPercent = RemapVal(nTime, nStartTime, nEndTime, 0, 1);
            if (nPercent >= 1) {
                fnApply(innerEnd);
                if (fnDone)
                    fnDone();
            }
            else {
                const current = new Map(rgKeys.map(k => [k, Lerp(nPercent, innerStart.get(k), innerEnd.get(k))]));
                fnApply(current);
                $.Schedule(0, InnerApply);
            }
        }
        $.Schedule(0, InnerApply);
    }
    return () => bCancelled = true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ludGVyMjAyMl9zaGFyZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3aW50ZXIyMDIyX3NoYXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUVBQXVFO0FBQ3ZFLHFFQUFxRTtBQTJCckUsTUFBTSxPQUFPLEdBQUc7SUFDWixTQUFTLEVBQUUsZUFBZSxDQUFDLGFBQWEsQ0FBRSxTQUFTLEVBQUUsV0FBVyxDQUFFO0lBQ2xFLE1BQU0sRUFBRSxlQUFlLENBQUMsYUFBYSxDQUFFLFNBQVMsRUFBRSxRQUFRLENBQThCO0NBQzNGLENBQUM7QUFDRixlQUFlLENBQUMseUJBQXlCLENBQUUsU0FBUyxFQUFFLENBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFHLE9BQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFFLENBQUM7QUFFN0csU0FBUyx1QkFBdUIsQ0FBSyxTQUFpQixFQUFFLFFBQW9CO0lBRXhFLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7SUFFaEMsTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixDQUFLLFNBQVMsQ0FBRSxDQUFDO0lBQzlELEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUUsQ0FBQztJQUMzQyxDQUFDLENBQUMsUUFBUSxDQUFFLENBQUMsRUFBRSxRQUFRLENBQUUsQ0FBQztJQUUxQixlQUFlLENBQUMseUJBQXlCLENBQUssU0FBUyxFQUFFLENBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRTtRQUV6RSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ25CLFFBQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFFLENBQUM7SUFFSixPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxp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