"use strict";
/// <reference path="../winter2022.d.ts" />
/// <reference path="util.ts" />
const Globals = {
    constants: CustomNetTables.GetTableValue("globals", "constants"),
    values: CustomNetTables.GetTableValue("globals", "values")
};
CustomNetTables.SubscribeNetTableListener("globals", (_, key, value) => Globals[key] = value);
function SubscribeAllTableValues(tableName, onUpdate) {
    const table = {};
    const all = CustomNetTables.GetAllTableValues(tableName);
    all.forEach(v => table[v.key] = v.value);
    $.Schedule(0, onUpdate);
    CustomNetTables.SubscribeNetTableListener(tableName, (_, key, value) => {
        table[key] = value;
        onUpdate();
    });
    return table;
}
function GetValidPlayerIDs() {
    const ids = [];
    for (let i = 0; i <= Players.GetMaxPlayers(); i++) {
        if (Players.IsValidPlayerID(i) && !Players.IsSpectator(i)) {
            ids.push(i);
        }
    }
    return ids;
}
function IsLocalPlayerPlaying() {
    const nTeam = Players.GetTeam(Players.GetLocalPlayer());
    return nTeam === DOTATeam_t.DOTA_TEAM_GOODGUYS || nTeam === DOTATeam_t.DOTA_TEAM_BADGUYS;
}
function TrackAltPressed(panel) {
    panel.SetHasClass("AltPressed", IsDotaAltPressed());
    $.Schedule(0.0, () => TrackAltPressed(panel));
}
function GetPanelRect(panel) {
    const x = panel.GetPositionWithinWindow().x / panel.actualuiscale_x;
    const y = panel.GetPositionWithinWindow().y / panel.actualuiscale_y;
    const width = panel.actuallayoutwidth / panel.actualuiscale_x;
    const height = panel.actuallayoutheight / panel.actualuiscale_y;
    return { x, y, width, height };
}
function ObjectToMap(obj) {
    return new Map(Object.keys(obj).map(k => [k, obj[k]]));
}
// Calls fnApply every frame with interpolated values of all keys in start and number.
// Calls fnDone at the end if provided.
// fnApply( start ) is called synchronously.
// fnApply( end ) is called synchronously if nSeconds <= 0.
function InterpolateEveryFrame(nSeconds, start, end, fnApply, fnDone) {
    let bCancelled = false;
    const rgKeys = [...new Set([...start.keys(), ...end.keys()])];
    const innerStart = new Map(rgKeys.map(k => [k, start.get(k) || 0]));
    const innerEnd = new Map(rgKeys.map(k => [k, end.get(k) || 0]));
    fnApply(innerStart);
    if (nSeconds < 0) {
        fnApply(innerEnd);
        if (fnDone)
            fnDone();
    }
    else {
        const nStartTime = Game.Time();
        const nEndTime = nStartTime + nSeconds;
        function InnerApply() {
            if (bCancelled)
                return;
            const nTime = Game.Time();
            const nPercent = RemapVal(nTime, nStartTime, nEndTime, 0, 1);
            if (nPercent >= 1) {
                fnApply(innerEnd);
                if (fnDone)
                    fnDone();
            }
            else {
                const current = new Map(rgKeys.map(k => [k, Lerp(nPercent, innerStart.get(k), innerEnd.get(k))]));
                fnApply(current);
                $.Schedule(0, InnerApply);
            }
        }
        $.Schedule(0, InnerApply);
    }
    return () => bCancelled = true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ludGVyMjAyMl9zaGFyZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9kb3RhX2FkZG9ucy93aW50ZXIyMDIyL3Bhbm9yYW1hL3NjcmlwdHMvY3VzdG9tX2dhbWUvd2ludGVyMjAyMl9zaGFyZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJDQUEyQztBQUMzQyxnQ0FBZ0M7QUEyQmhDLE1BQU0sT0FBTyxHQUFHO0lBQ1osU0FBUyxFQUFFLGVBQWUsQ0FBQyxhQUFhLENBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBRTtJQUNsRSxNQUFNLEVBQUUsZUFBZSxDQUFDLGFBQWEsQ0FBRSxTQUFTLEVBQUUsUUFBUSxDQUE4QjtDQUMzRixDQUFDO0FBQ0YsZUFBZSxDQUFDLHlCQUF5QixDQUFFLFNBQVMsRUFBRSxDQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBRyxPQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBRSxDQUFDO0FBRTdHLFNBQVMsdUJBQXVCLENBQUssU0FBaUIsRUFBRSxRQUFvQjtJQUV4RSxNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO0lBRWhDLE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBSyxTQUFTLENBQUUsQ0FBQztJQUM5RCxHQUFHLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUM7SUFDM0MsQ0FBQyxDQUFDLFFBQVEsQ0FBRSxDQUFDLEVBQUUsUUFBUSxDQUFFLENBQUM7SUFFMUIsZUFBZSxDQUFDLHlCQUF5QixDQUFLLFNBQVMsRUFBRSxDQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFHLEVBQUU7UUFFekUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNuQixRQUFRLEVB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